{"remainingRequest":"/Users/benjunliu/Desktop/Work/web/Untitled Folder/node_modules/_babel-loader@8.2.5@babel-loader/lib/index.js!/Users/benjunliu/Desktop/Work/web/Untitled Folder/node_modules/_ts-loader@6.2.2@ts-loader/index.js??ref--15-2!/Users/benjunliu/Desktop/Work/web/Untitled Folder/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js??ref--1-0!/Users/benjunliu/Desktop/Work/web/Untitled Folder/node_modules/_vue-loader@16.8.3@vue-loader/dist/index.js??ref--1-1!/Users/benjunliu/Desktop/Work/web/Untitled Folder/src/views/database/index.vue?vue&type=script&lang=ts&setup=true","dependencies":[{"path":"/Users/benjunliu/Desktop/Work/web/Untitled Folder/src/views/database/index.vue","mtime":1653475152349},{"path":"/Users/benjunliu/Desktop/Work/web/Untitled Folder/babel.config.js","mtime":1638601854000},{"path":"/Users/benjunliu/Desktop/Work/web/Untitled Folder/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/benjunliu/Desktop/Work/web/Untitled Folder/node_modules/_babel-loader@8.2.5@babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/benjunliu/Desktop/Work/web/Untitled Folder/node_modules/_ts-loader@6.2.2@ts-loader/index.js","mtime":499162500000},{"path":"/Users/benjunliu/Desktop/Work/web/Untitled Folder/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/benjunliu/Desktop/Work/web/Untitled Folder/node_modules/_vue-loader@16.8.3@vue-loader/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["defineComponent","_defineComponent","reactive","onBeforeUnmount","ref","watch","ElMessage","dealResponseCode","formatTime","WEEK","JsonViewer","name","setup","__props","expose","timeInfo","setInterval","dateDay","dateYear","dateWeek","jsonData","total","limit","skip","links","previous","undefined","data","id","firstname","lastname","awards","known","position","lat","lng","description","bornAt","diedAt","formatTimeInfo","date","Date","getDay","handleTime","host","grouped","hosts","onlyShowAlert","actualPrograms","programs","logs","activeGroupIdx","activePgIdx","activeSelection","isGrouping","settingVisible","socket","socketUrl","createNewSocket","close","WebSocket","onopen","onmessage","parseSocketMsg","onerror","message","grouping","type","onclose","handleSelect","key","keyPath","value","process","env","VUE_APP_WEBSOCKET_URL","formatLogTitle","index","program","ctime","setOpacity","isOpacity","class","replace","newValue","oldValue","normal","abnormal","indexOf","push","concat","rows","Math","ceil","length","cols","console","log","group","newProgram","modules","orders","trades","fails","currGMV","maxGMV","symbols","engaged","enterBox","leaveBox","logContainer","visible","query","from","to","number","numberKeys","tableRowClassName","row","rowIndex","second","since","formatGMV","formatSymbols","msg","response","JSON","parse","successHandler","i","level","color","text","groups","opacity","idx","pid","reboots","newModule","oldModule","slice","failHandler","error","showDrawer","__returned__","Object","defineProperty","enumerable"],"sourceRoot":"","sources":["/Users/benjunliu/Desktop/Work/web/Untitled Folder/node_modules/_cache-loader@4.1.0@cache-loader/dist/cjs.js"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport {\n  reactive,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  ref,\n  watch,\n  defineComponent,\n} from \"vue\";\nimport { Setting } from \"@element-plus/icons-vue\";\n// import EntryDrawer from './components/entrydrawer.vue'\nimport http from \"@/utils/network/http\";\nimport { ElMessage } from \"_element-plus@1.2.0-beta.6@element-plus/es\";\nimport { dealResponseCode } from \"@/utils/functions\";\nimport { formatTime } from \"@/utils/index\";\nimport { subtitle, WEEK } from \"@/constant/index\";\nimport JsonViewer from \"vue3-json-viewer\";\n\n// import scroll from \"vue-seamless-scroll\";\n\n// const currentDate = ref(new Date())\n// let entry_drawer = ref(null)\n// const programsNum = ref(0)\n\n\nexport default /*#__PURE__*/_defineComponent({\n  name: 'index',\n  setup(__props, { expose }) {\n  expose();\n\nconst timeInfo = reactive({\n  setInterval: 0,\n  dateDay: \"\",\n  dateYear: \"\",\n  dateWeek: \"\",\n});\n\nconst jsonData = {\n  total: 25,\n  limit: 10,\n  skip: 0,\n  links: {\n    previous: undefined,\n  },\n  data: [\n    {\n      id: \"5968fcad629fa84ab65a5247\",\n      firstname: \"Ada\",\n      lastname: \"Lovelace\",\n      awards: null,\n      known: [\"mathematics\", \"computing\"],\n      position: {\n        lat: 44.563836,\n        lng: 6.495139,\n      },\n      description: `Augusta Ada King, Countess of Lovelace (née Byron; 10 December 1815 – 27 November 1852) was an English mathematician and writer,\n            chiefly known for her work on Charles Babbage's proposed mechanical general-purpose computer,\n            the Analytical Engine. She was the first to recognise that the machine had applications beyond pure calculation,\n            and published the first algorithm intended to be carried out by such a machine.\n            As a result, she is sometimes regarded as the first to recognise the full potential of a \"computing machine\" and the first computer programmer.`,\n      bornAt: \"1815-12-10T00:00:00.000Z\",\n      diedAt: \"1852-11-27T00:00:00.000Z\",\n    },\n    {\n      id: \"5968fcad629fa84ab65a5246\",\n      firstname: \"Grace\",\n      lastname: \"Hopper\",\n      awards: [\n        \"Defense Distinguished Service Medal\",\n        \"Legion of Merit\",\n        \"Meritorious Service Medal\",\n        \"American Campaign Medal\",\n        \"World War II Victory Medal\",\n        \"National Defense Service Medal\",\n        \"Armed Forces Reserve Medal\",\n        \"Naval Reserve Medal\",\n        \"Presidential Medal of Freedom\",\n      ],\n      known: null,\n      position: {\n        lat: 43.614624,\n        lng: 3.879995,\n      },\n      description: `Grace Brewster Murray Hopper (née Murray; December 9, 1906 – January 1, 1992)\n            was an American computer scientist and United States Navy rear admiral.\n            One of the first programmers of the Harvard Mark I computer,\n            she was a pioneer of computer programming who invented one of the first compiler related tools.\n            She popularized the idea of machine-independent programming languages, which led to the development of COBOL,\n            an early high-level programming language still in use today.`,\n      bornAt: \"1815-12-10T00:00:00.000Z\",\n      diedAt: \"1852-11-27T00:00:00.000Z\",\n    },\n  ],\n};\n// const data = [\n//   {\n//     value: '1',\n//     label: 'Level one 1',\n//     children: [\n//       {\n//         value: '1-1',\n//         label: 'Level two 1-1',\n//         children: [\n//           {\n//             value: '1-1-1',\n//             label: 'Level three 1-1-1',\n//           },\n//         ],\n//       },\n//     ],\n//   },\n//   {\n//     value: '2',\n//     label: 'Level one 2',\n//     children: [\n//       {\n//         value: '2-1',\n//         label: 'Level two 2-1',\n//         children: [\n//           {\n//             value: '2-1-1',\n//             label: 'Level three 2-1-1',\n//           },\n//         ],\n//       },\n//       {\n//         value: '2-2',\n//         label: 'Level two 2-2',\n//         children: [\n//           {\n//             value: '2-2-1',\n//             label: 'Level three 2-2-1',\n//           },\n//         ],\n//       },\n//     ],\n//   },\n//   {\n//     value: '3',\n//     label: 'Level one 3',\n//     children: [\n//       {\n//         value: '3-1',\n//         label: 'Level two 3-1',\n//         children: [\n//           {\n//             value: '3-1-1',\n//             label: 'Level three 3-1-1',\n//           },\n//         ],\n//       },\n//       {\n//         value: '3-2',\n//         label: 'Level two 3-2',\n//         children: [\n//           {\n//             value: '3-2-1',\n//             label: 'Level three 3-2-1',\n//           },\n//         ],\n//       },\n//     ],\n//   },\n// ]\n\nconst formatTimeInfo = () => {\n  const date = new Date();\n  timeInfo.dateDay = formatTime(date, \"HH: mm: ss\");\n  timeInfo.dateYear = formatTime(date, \"yyyy-MM-dd\");\n  timeInfo.dateWeek = WEEK[date.getDay()];\n};\n\nconst handleTime = () => {\n  timeInfo.setInterval = setInterval(() => {\n    formatTimeInfo();\n  }, 1000);\n};\n\nformatTimeInfo();\nhandleTime();\n\nlet host = ref(null);\n// const hosts = [\n//   {\n//     value: \"fpis_kbsiml14\",\n//     label: \"fpis_kbsiml14\",\n//   },\n//   {\n//     value: \"fpis_kbsiml35\",\n//     label: \"fpis_kbsiml35\",\n//   },\n//   {\n//     value: \"fpis_kbsiml66\",\n//     label: \"fpis_kbsiml66\",\n//   },\n// ];\n\nlet grouped = ref([]);\nlet hosts = ref([]);\n\nlet onlyShowAlert = ref(false);\nlet actualPrograms = ref([]); // the stored whole programs\nlet programs = ref([]); // for show\n\nlet logs = ref([]);\nconst activeGroupIdx = ref(null);\nlet activePgIdx = ref(null);\nconst activeSelection = ref(\"all\");\nlet isGrouping = ref(false);\nlet settingVisible = ref(false);\n\nlet socket, socketUrl;\nconst createNewSocket = () => {\n  if (socket !== undefined) {\n    socket.close();\n  }\n\n  socket = new WebSocket(socketUrl);\n\n  socket.onopen = function () {\n    // console.log(\"socket opened...\");\n    // socket.send(JSON.stringify({username: \"bliu\",msg: \"test websocket\"}));\n  };\n\n  socket.onmessage = parseSocketMsg;\n\n  socket.onerror = function () {\n    ElMessage({\n      message: \"Websocket error\",\n      grouping: true,\n      type: \"error\",\n    });\n  };\n\n  socket.onclose = function () {\n    // console.log(\"Websocket closed......\");\n  };\n};\n\nconst handleSelect = (key: string, keyPath: string[]) => {\n  if (keyPath[0] == \"organize\") {\n    onlyShowAlert.value = key == \"Alert Only\";\n    isGrouping.value = false;\n    return;\n  }\n\n  if (keyPath[0] == \"all\") {\n    isGrouping.value = true;\n    // socketUrl = \"ws://192.168.0.120:6919/quoter/all/all\";\n    // socketUrl = \"ws://7.151.16.99:6919/quoter/all/all\";\n    socketUrl = process.env.VUE_APP_WEBSOCKET_URL + \"quoter/all/all\";\n  } else if (keyPath[0] == \"host\") {\n    isGrouping.value = false;\n    // socketUrl = \"ws://192.168.0.120:6919/quoter/host/\" + key;\n    socketUrl = process.env.VUE_APP_WEBSOCKET_URL + \"quoter/host/\" + key;\n    // socketUrl = \"ws://7.151.16.99:6919/quoter/host/\" + key\n  } else if (keyPath[0] == \"strategy\") {\n    isGrouping.value = false;\n    // socketUrl = \"ws://192.168.0.120:6919/quoter/strategy/\" + key;\n    socketUrl = process.env.VUE_APP_WEBSOCKET_URL + \"quoter/strategy/\" + key;\n    // socketUrl = \"ws://7.151.16.99:6919/quoter/strategy/\" + key\n  }\n\n  createNewSocket();\n};\n\nconst formatLogTitle = (index) => {\n  for (var program of actualPrograms.value) {\n    if (logs.value[index].id === program.id) {\n      return (\n        \"[\" +\n        logs.value[index].ctime +\n        \"]:\" +\n        program.name +\n        \"@\" +\n        hosts.value[program.host - 1].name\n      );\n    }\n  }\n};\n\nconst setOpacity = (index, isOpacity) => {\n  if (isOpacity) {\n    programs.value[index].class = programs.value[index].class + \" opacity\";\n  } else {\n    programs.value[index].class = programs.value[index].class.replace(\n      /opacity/g,\n      \"\"\n    );\n  }\n};\n\nwatch(onlyShowAlert, (newValue, oldValue) => {\n  if (newValue) {\n    programs.value = [];\n    var normal = [];\n    var abnormal = [];\n    for (var program of actualPrograms.value) {\n      if (program[\"class\"].indexOf(\"alert\") !== -1) {\n        abnormal.push(program);\n      } else {\n        normal.push(program);\n      }\n    }\n    programs.value = normal.concat(abnormal);\n  } else {\n    programs.value = actualPrograms.value;\n  }\n  rows.value = Math.ceil(programs.value.length / cols.value);\n});\n\nwatch(activeGroupIdx, (newValue, oldValue) => {\n  console.log(newValue, \"<----\", oldValue);\n  if (newValue == null) {\n    if (isGrouping.value) {\n      programs.value = [];\n      for (var group of grouped.value) {\n        var newProgram = null;\n        for (var program of actualPrograms.value) {\n          if (program.group == group.id) {\n            if (program[\"class\"].indexOf(\"alert\") !== -1) {\n              newProgram = {\n                group: group.id,\n                name: group.name,\n                class: \"alert\",\n                modules: [\n                  { name: \"component1\", orders: 0, trades: 0, fails: 0 },\n                  { name: \"component2\", currGMV: 0, maxGMV: 1 },\n                  { name: \"component3\", symbols: 0, engaged: 0 },\n                ],\n              };\n            } else {\n              newProgram = {\n                group: group.id,\n                name: group.name,\n                class: \"normal\",\n                modules: [\n                  { name: \"component1\", orders: 0, trades: 0, fails: 0 },\n                  { name: \"component2\", currGMV: 0, maxGMV: 1 },\n                  { name: \"component3\", symbols: 0, engaged: 0 },\n                ],\n              };\n            }\n          }\n        }\n        if (newProgram !== null) {\n          programs.value.push(newProgram);\n        }\n      }\n    }\n\n    for (program of programs.value) {\n      program.class = program.class.replace(/opacity/g, \"\");\n    }\n  } else {\n    if (isGrouping.value) {\n      programs.value = [];\n      for (group of grouped.value) {\n        if (group.id === newValue) {\n          for (program of actualPrograms.value) {\n            if (program.group === newValue) {\n              programs.value.push(program);\n            }\n          }\n        } else {\n          newProgram = null;\n          for (program of actualPrograms.value) {\n            if (program.group == group.id) {\n              if (program[\"class\"].indexOf(\"alert\") !== -1) {\n                newProgram = {\n                  group: group.id,\n                  name: group.name,\n                  class: \"alert\",\n                  modules: [\n                    { name: \"component1\", orders: 0, trades: 0, fails: 0 },\n                    { name: \"component2\", currGMV: 0, maxGMV: 1 },\n                    { name: \"component3\", symbols: 0, engaged: 0 },\n                  ],\n                };\n                break;\n              } else {\n                newProgram = {\n                  group: group.id,\n                  name: group.name,\n                  class: \"normal\",\n                  modules: [\n                    { name: \"component1\", orders: 0, trades: 0, fails: 0 },\n                    { name: \"component2\", currGMV: 0, maxGMV: 1 },\n                    { name: \"component3\", symbols: 0, engaged: 0 },\n                  ],\n                };\n              }\n            } else if (newProgram !== null) {\n              break;\n            }\n          }\n          if (newProgram !== null) {\n            programs.value.push(newProgram);\n          }\n        }\n      }\n    }\n    for (program of programs.value) {\n      if (program.group != newValue) {\n        program.class = program.class + \" opacity\";\n      } else {\n        program.class = program.class.replace(/opacity/g, \"\");\n        // ElMessage({\n        //   message: grouped.value[program.group].name,\n        //   grouping: true,\n        //   type: \"success\",\n        // });\n      }\n    }\n\n    // var oldGroupIdx = -1,\n    //   newGroupIdx = -1;\n    // for (var group of grouped.value) {\n    //   var idx = group.programs.indexOf(newValue);\n    //   if (idx !== -1) {\n    //     newGroupIdx = idx;\n    //     for (idx of group.programs) {\n    //       setOpacity(idx, false);\n    //     }\n    //   }\n    //   if (oldValue !== null) {\n    //     idx = group.programs.indexOf(oldValue);\n    //     if (idx !== -1) {\n    //       oldGroupIdx = idx;\n    //     }\n    //   }\n\n    //   if ((oldGroupIdx !== -1 || oldValue == null) && newGroupIdx !== -1) {\n    //     break;\n    //   }\n    // }\n  }\n});\nconst enterBox = (index) => {\n  activePgIdx.value = index;\n  console.log(\"programs:\", programs.value);\n  activeGroupIdx.value = programs.value[index].group;\n  // console.log(\"enter...\");\n  // for ( var i = 0; i < programs.value.length; ++i) {\n  //   console.log(\"Before\", programs.value[i].class)\n  //   programs.value[i].class.replace(/opacity/g, \"\")\n  //   if ( i != index ) {\n  //     programs.value[i].class += \" opacity\"\n  //   }\n  //   console.log(\"After\", programs.value[i].class)\n  // }\n};\n\nconst leaveBox = () => {\n  console.log(\"leave...\");\n  activePgIdx.value = null;\n  activeGroupIdx.value = null;\n  // for ( var i = 0; i < programs.value.length; ++i) {\n  //   programs.value[i].class.replace(/opacity/g, \"\")\n  // }\n};\n\nconst logContainer = ref(null);\nlet rows = ref(0);\nlet cols = ref(24);\nlet visible = ref(false);\n// let queryTimer = ref(null)\nlet query = {\n  from: null,\n  to: null,\n  name: null,\n  number: null,\n};\nconst numberKeys = [\"orders\", \"trades\", \"fails\", \"currGMV\", \"maxGMV\"];\n\n// let programs_keys = ref([]);\n\nonBeforeUnmount(() => {\n  console.log(\"onBeforeUnmount\");\n  //   stopQueryStatus()\n});\n\nconst tableRowClassName = ({ row, rowIndex }) => {\n  console.log(\"row....\", row.second.fails, row.second.fails > 300);\n  if (row.second.fails > 300) {\n    return \"error-row\";\n  } else if (row.second.since == \"\") {\n    return \"warning-row\";\n  }\n  return \"\";\n};\n\nconst formatGMV = (currGMV, maxGMV) => {\n  return () => {\n    return \"Curr:\" + currGMV; // + \",Max:\" + maxGMV;\n  };\n};\n\nconst formatSymbols = (symbols, engaged) => {\n  return () => {\n    return \"Symbols:\" + symbols + \",Engaged: \" + engaged;\n  };\n};\n\nconst parseSocketMsg = (msg) => {\n  var response = JSON.parse(msg.data);\n  console.log(\"response\");\n  console.log(response);\n  dealResponseCode(\n    response,\n    function successHandler() {\n      // first time: get the whole programs\n      if (response.data.programs !== undefined) {\n        onlyShowAlert.value = false;\n        actualPrograms.value = [];\n        programs.value = [];\n        grouped.value = [];\n        hosts.value = [];\n        logs.value = [];\n        rows.value = 0;\n        activePgIdx.value = null;\n        activeGroupIdx.value = null;\n\n        if (response.data.logs !== undefined) {\n          for (i = 0; i < response.data.logs.length; ++i) {\n            if (response.data.logs[i].level == \"0\") {\n              var color = \"color: #67c23a\"; // success\n            } else if (response.data.logs[i].level == \"1\") {\n              color = \"color: #e6a23c\"; // warning\n            } else if (response.data.logs[i].level == \"2\") {\n              color = \"color: #ff1602\"; // alert #f56c6c #f20c00\n            } else {\n              color = \"color: #909399\";\n            }\n            logs.value.push({\n              id: response.data.logs[i].program,\n              text: response.data.logs[i].text,\n              level: response.data.logs[i].level,\n              color: color,\n              ctime: response.data.logs[i].ctime,\n            });\n          }\n        }\n\n        grouped.value = response.data.groups;\n        for (var i = 0; i < grouped.value.length; ++i) {\n          grouped.value[i].opacity = 1;\n        }\n        console.log(\"coming hosts...\");\n        console.log(response.data.hosts);\n        hosts.value = response.data.hosts;\n        console.log(\"parsed hosts\");\n        console.log(hosts.value);\n        actualPrograms.value = response.data.programs;\n\n        for (i = 0; i < actualPrograms.value.length; ++i) {\n          if (actualPrograms.value[i].modules == undefined) {\n            actualPrograms.value[i].modules = [];\n            actualPrograms.value[i][\"class\"] = \"dead blink-border\";\n          } else if (\n            actualPrograms.value[i].modules[0].fails >\n            actualPrograms.value[i].modules[0].trades\n          ) {\n            actualPrograms.value[i][\"class\"] = \"alert\";\n          } else {\n            actualPrograms.value[i][\"class\"] = \"normal\";\n          }\n        }\n\n        if (isGrouping.value) {\n          for (var group of grouped.value) {\n            var newProgram = null;\n            for (var program of actualPrograms.value) {\n              if (program.group == group.id) {\n                if (program[\"class\"].indexOf(\"alert\") !== -1) {\n                  newProgram = {\n                    group: group.id,\n                    name: group.name,\n                    class: \"alert\",\n                    modules: [\n                      { name: \"component1\", orders: 0, trades: 0, fails: 0 },\n                      { name: \"component2\", currGMV: 0, maxGMV: 1 },\n                      { name: \"component3\", symbols: 0, engaged: 0 },\n                    ],\n                  };\n                } else {\n                  newProgram = {\n                    group: group.id,\n                    name: group.name,\n                    class: \"normal\",\n                    modules: [\n                      { name: \"component1\", orders: 0, trades: 0, fails: 0 },\n                      { name: \"component2\", currGMV: 0, maxGMV: 1 },\n                      { name: \"component3\", symbols: 0, engaged: 0 },\n                    ],\n                  };\n                }\n              }\n            }\n            if (newProgram !== null) {\n              programs.value.push(newProgram);\n            }\n          }\n        } else {\n          programs.value = actualPrograms.value;\n        }\n\n        console.log(\"Programs: \", programs.value);\n        console.log(\"actualPrograms: \", actualPrograms.value);\n      } else {\n        program = response.data.program;\n        for (var idx = 0; idx < actualPrograms.value.length; ++idx) {\n          if (actualPrograms.value[idx].id == program.id) {\n            break;\n          }\n        }\n\n        actualPrograms.value[idx].group = program.group;\n        actualPrograms.value[idx].host = program.host;\n        actualPrograms.value[idx].pid = program.pid;\n        actualPrograms.value[idx].reboots = program.reboots;\n\n        actualPrograms.value[idx][\"class\"] = actualPrograms.value[idx][\n          \"class\"\n        ].replace(/alert/g, \"normal\");\n        for (var newModule of program[\"modules\"]) {\n          if (\n            newModule[\"name\"] == \"component2\" &&\n            newModule[\"fails\"] > newModule[\"trades\"]\n          ) {\n            actualPrograms.value[idx][\"class\"] = \"alert\";\n          }\n        }\n\n        for (newModule of program[\"modules\"]) {\n          for (var oldModule of actualPrograms.value[idx][\"modules\"]) {\n            if (newModule[\"name\"] == oldModule[\"name\"]) {\n              oldModule = newModule;\n            }\n          }\n          if (newModule[\"name\"] == \"log\") {\n            if (newModule[\"level\"] == \"0\") {\n              color = \"color: #67c23a\"; // success\n            } else if (newModule[\"level\"] == \"1\") {\n              color = \"color: #e6a23c\"; // warning\n            } else if (newModule[\"level\"] == \"2\") {\n              color = \"color: #ff1602\"; // alert #f56c6c #f20c00\n            } else {\n              color = \"color: #909399\";\n            }\n            logs.value.push({\n              id: program.id,\n              text: newModule[\"text\"],\n              level: newModule[\"level\"],\n              color: color,\n              ctime: newModule[\"ctime\"],\n            });\n          }\n        }\n        if (logs.value.length > 40) {\n          logs.value = logs.value.slice(logs.value.length - 40);\n        }\n\n        programs.value = [];\n        if (isGrouping.value) {\n          if (activeGroupIdx.value !== null) {\n            for (group of grouped.value) {\n              if (group.id === activeGroupIdx.value) {\n                for (program of actualPrograms.value) {\n                  if (program.group === activeGroupIdx.value) {\n                    programs.value.push(program);\n                  }\n                }\n              } else {\n                newProgram = null;\n                for (program of actualPrograms.value) {\n                  if (program.group == group.id) {\n                    if (program[\"class\"].indexOf(\"alert\") !== -1) {\n                      newProgram = {\n                        group: group.id,\n                        name: group.name,\n                        class: \"alert\",\n                        modules: [\n                          {\n                            name: \"component1\",\n                            orders: 0,\n                            trades: 0,\n                            fails: 0,\n                          },\n                          { name: \"component2\", currGMV: 0, maxGMV: 1 },\n                          { name: \"component3\", symbols: 0, engaged: 0 },\n                        ],\n                      };\n                      break;\n                    } else {\n                      newProgram = {\n                        group: group.id,\n                        name: group.name,\n                        class: \"normal\",\n                        modules: [\n                          {\n                            name: \"component1\",\n                            orders: 0,\n                            trades: 0,\n                            fails: 0,\n                          },\n                          { name: \"component2\", currGMV: 0, maxGMV: 1 },\n                          { name: \"component3\", symbols: 0, engaged: 0 },\n                        ],\n                      };\n                    }\n                  } else if (newProgram !== null) {\n                    break;\n                  }\n                }\n                if (newProgram !== null) {\n                  programs.value.push(newProgram);\n                }\n              }\n            }\n          } else {\n            for (group of grouped.value) {\n              newProgram = null;\n              for (program of actualPrograms.value) {\n                if (program.group == group.id) {\n                  if (program[\"class\"].indexOf(\"alert\") !== -1) {\n                    newProgram = {\n                      group: group.id,\n                      name: group.name,\n                      class: \"alert\",\n                      modules: [\n                        { name: \"component1\", orders: 0, trades: 0, fails: 0 },\n                        { name: \"component2\", currGMV: 0, maxGMV: 1 },\n                        { name: \"component3\", symbols: 0, engaged: 0 },\n                      ],\n                    };\n                    break;\n                  } else {\n                    newProgram = {\n                      group: group.id,\n                      name: group.name,\n                      class: \"normal\",\n                      modules: [\n                        { name: \"component1\", orders: 0, trades: 0, fails: 0 },\n                        { name: \"component2\", currGMV: 0, maxGMV: 1 },\n                        { name: \"component3\", symbols: 0, engaged: 0 },\n                      ],\n                    };\n                  }\n                } else if (newProgram !== null) {\n                  break;\n                }\n              }\n              if (newProgram !== null) {\n                programs.value.push(newProgram);\n              }\n            }\n          }\n        } else if (onlyShowAlert.value) {\n          var normal = [];\n          var abnormal = [];\n          for (program of actualPrograms.value) {\n            if (program[\"class\"].indexOf(\"alert\") !== -1) {\n              abnormal.push(program);\n            } else {\n              normal.push(program);\n            }\n          }\n          programs.value = normal.concat(abnormal);\n        } else {\n          programs.value = actualPrograms.value;\n        }\n      }\n      rows.value = Math.ceil(programs.value.length / cols.value);\n    },\n    function failHandler() {\n      ElMessage.error(\"failure\" + \":\" + response.msg);\n    },\n    () => {\n      // nothing\n    }\n  );\n};\n\n// const startQueryStatus = () => {\n//   console.log(\"query...\");\n//   //   let url = 'quoter/all'\n//   query.from = 0;\n//   query.to = \"jump trading\";\n\n//   http.get(\"quoter/all\", query, Object).then((response) => {\n//     programs.value = response.data.quoters;\n//   });\n// };\n\n// const stopQueryStatus = () => {\n//   clearInterval(queryTimer.value)\n//   queryTimer.value = null\n// }\n\n// const handleClickCard = (row, col) => {\n//     console.log(row, col)\n// }\n\n// const enterThumbnail = (index) => {\n//   console.log(index);\n//   console.log(programs.value[index]);\n//   programs.value[index].isShowPopOver = true;\n// };\n\n// const leaveThumnail = (index) => {\n//   programs.value[index].isShowPopOver = false;\n// };\n\n// const clickPop = (index) => {\n//   if (activeId.value == index && showPop.value) return;\n//   showPop.value = false;\n//   activeId.value = index;\n//   nextTick(() => {\n//     showPop.value = true;\n//     nextTick(() => {\n//       pop.value?.doShow();\n//     });\n//   });\n// };\n\nconst showDrawer = () => {\n  console.log(\"clicked\");\n  visible.value = true;\n  // entry_drawer.value.show(programs)\n};\n\n// queryTimer.value = setInterval(startQueryStatus, 10000)\n\n// startQueryStatus()\n\nif (typeof WebSocket == \"undefined\") {\n  ElMessage({\n    message: \"Websocket is unsupported, please use Chrome\",\n    grouping: true,\n    type: \"error\",\n  });\n} else {\n  // const socketUrl = 'ws://localhost:6919/wx/?level=all&key=all'\n  // socketUrl = \"ws://7.151.16.99:6919/quoter/all/all\";\n  socketUrl = process.env.VUE_APP_WEBSOCKET_URL + \"quoter/all/all\";\n  createNewSocket();\n}\n\nconst __returned__ = { timeInfo, jsonData, formatTimeInfo, handleTime, host, grouped, hosts, onlyShowAlert, actualPrograms, programs, logs, activeGroupIdx, activePgIdx, activeSelection, isGrouping, settingVisible, socket, socketUrl, createNewSocket, handleSelect, formatLogTitle, setOpacity, enterBox, leaveBox, logContainer, rows, cols, visible, query, numberKeys, tableRowClassName, formatGMV, formatSymbols, parseSocketMsg, showDrawer, JsonViewer }\nObject.defineProperty(__returned__, '__isScriptSetup', { enumerable: false, value: true })\nreturn __returned__\n}\n\n})"]}]}